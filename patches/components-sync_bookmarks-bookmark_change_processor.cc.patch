diff --git a/components/sync_bookmarks/bookmark_change_processor.cc b/components/sync_bookmarks/bookmark_change_processor.cc
index acb064faac3ee975ec07be4977fc0970309dfb15..2b41a540a8e172cda43bce61dcfcfdcb133a34fd 100644
--- a/components/sync_bookmarks/bookmark_change_processor.cc
+++ b/components/sync_bookmarks/bookmark_change_processor.cc
@@ -85,6 +85,7 @@ void BookmarkChangeProcessor::UpdateSyncNodeProperties(
     bookmark_specifics.set_url(src->url().spec());
   }
   bookmark_specifics.set_creation_time_us(src->date_added().ToInternalValue());
+  AddBraveMetaInfo(src, model);
   dst->SetBookmarkSpecifics(bookmark_specifics);
   SetSyncNodeFavicon(src, model, dst);
   SetSyncNodeMetaInfo(src, dst);
@@ -244,6 +245,7 @@ void BookmarkChangeProcessor::CreateOrUpdateSyncNode(const BookmarkNode* node) {
     // Acquire a scoped write lock via a transaction.
     syncer::WriteTransaction trans(FROM_HERE, share_handle(), &new_version);
     sync_id = model_associator_->GetSyncIdFromChromeId(node->id());
+    bookmark_model_->RemoveObserver(this);
     if (sync_id != syncer::kInvalidId) {
       UpdateSyncNode(
           node, bookmark_model_, &trans, model_associator_, error_handler());
@@ -257,6 +259,7 @@ void BookmarkChangeProcessor::CreateOrUpdateSyncNode(const BookmarkNode* node) {
                                model_associator_,
                                error_handler());
     }
+    bookmark_model_->AddObserver(this);
   }
 
   if (syncer::kInvalidId != sync_id) {
@@ -416,6 +419,11 @@ void BookmarkChangeProcessor::BookmarkNodeMoved(BookmarkModel* model,
       return;
     }
 
+    bookmark_model_->RemoveObserver(this);
+    AddBraveMetaInfo(child, model);
+    SetSyncNodeMetaInfo(child, &sync_node);
+    bookmark_model_->AddObserver(this);
+
     if (!PlaceSyncNode(MOVE, new_parent, new_index, &trans, &sync_node,
                        model_associator_)) {
       syncer::SyncError error(FROM_HERE,
